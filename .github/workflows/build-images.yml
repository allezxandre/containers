name: Build Images

on:
  workflow_dispatch:
  push:
    branches:
      - "main"
  # Schedule a build before the cache expires (7 days)
  schedule:
    - cron: "0 10 */6 * *" # Every 6 days at 10:00 UTC

# Only run one workflow at a time per branch
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  docker-build-push:
    name: Build and push images
    timeout-minutes: 120
    strategy:
      matrix:
        include:
          - image-name: gpac
            title: GPAC
            description: Debian-stable based image with GPAC and its dependencies installed
            platforms: linux/amd64,linux/arm64
          - image-name: anacrolix-confluence
            title: Anacrolix Confluence
            description: Debian-Bullseye based image with @Anacrolix/Confluence installed
            platforms: linux/amd64,linux/arm64
    runs-on: ubuntu-latest
    steps:
      - name: Prepare image metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.image-name }}
          tags: |
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value={{date 'YYYY-MM-DD'}}
          labels: |
            org.opencontainers.image.title=${{ matrix.title }}
            org.opencontainers.image.description=${{ matrix.description }}
            org.opencontainers.image.authors=alexandre@jouandin.eu
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          push: true
          pull: true # Provides additional cache
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: ${{ matrix.platforms }}
          context: "{{defaultContext}}:${{ matrix.image-name }}"
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true # Store data like the Dockerfile in the image
